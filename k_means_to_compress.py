# -*- coding: utf-8 -*-
"""k-means-to-compress.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QHciW9awx9x5BiZi_U_mMksbv6U60OUU
"""

import numpy as np
from sklearn.cluster import KMeans
from skimage import io
from google.colab.patches import cv2_imshow

# Load the image
image = io.imread('/content/Saint-Basils-Cathedral.jpg')
cv2_imshow(image)

# Reshape the image into a 2D array of pixels
rows,cols,colors = image.shape
image_array = np.reshape(image,(rows*cols,colors))

# Fit the KMeans algorithm
kmeans = KMeans(n_clusters=512, random_state=0).fit(image_array)

# Predict the closest cluster for each pixel
labels = kmeans.predict(image_array)
compressed_image = kmeans.cluster_centers_[labels]

# Reshape the result into a 3D array of 8-bit integers
compressed_image = np.clip(compressed_image.astype('uint8'), 0, 255)
compressed_image = np.reshape(compressed_image, (rows, cols, colors))

cv2_imshow(compressed_image)

# Save the result
io.imsave('compressed_image.jpg', compressed_image)